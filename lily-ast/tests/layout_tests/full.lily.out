Identity : Type -> Type;0
Identity a ?{1
  _ : a -> Identity a;1}1;0

Equal : Type -> Type -> Boolean;0
Equal a b !{1
  _ : a -> a -> True;1
  _ : a -> b -> False;1}1;0

Eq : Type -> Constraint;0
Eq a |{1
  eq : a -> a -> Boolean;1}1;0

head : List a -> Maybe a;0
head xs = case xs of{1
  Cons x _ -> Just x;1
  Nil      -> Nothing;1}1;0

main : Effect Unit;0
main = do{1
  log message;1
  log message;1
  attempt do{2
    log message;2
    log message;2}2;1}1;0

ofCollapse : Int;0
ofCollapse =
  case
    do{1 _ <- pure 0;1
       pure 1;1}1
  of{1
    Just x -> x;1
    Nothing -> 0;1}1;0

lambdaMask : List a -> Maybe a;0
lambdaMask xs = case xs of{1
  Cons x _ if (\_ -> true) x ->
    Just x;1
  _ ->
    Nothing;1}1;0

arrowFinishDo : List a -> Maybe a;0
arrowFinishDo xs = case xs of{1
  Cons x _ if do{2 true;2}2 ->
    Just x;1
  _ ->
    Nothing;1}1;0

conditionalDo : Effect Unit;0
conditionalDo = do{1
  log something;1
  if do{2 true;2}2 then do{2
    log something;2}2
  else do{2
    log something;2}2;1}1;0

letIn : Int;0
letIn =
  let{1
    x : Int;1
    x = 1;1

    y : Int;1
    y = 1;1}1
  in
    x + y;0

adoIn : Int;0
adoIn = ado{1
  x <- pure 1;1
  y <- pure 1;1
  let{2
    a : Int;2
    a = let{3 b = c;3}3 in d;2

    e : Int;2
    e = let{3 f = g;3}3 in h;2}2;1}1
  in x + y;0

adoLet : Effect Unit;0
adoLet = do{1
  logShow $ x + y;1
  let{2
    x : Int;2
    x = 1;2

    y : Int;2
    y = 1;2}2;1
  logShow $ x + y;1}1;0
