#+author: purefunctor

* concrete syntax trees?

Unlike an abstract syntax tree, which models the source file in a manner that's easy to consume by the compiler for tasks such as type checking and code generation, concrete syntax trees model source files as they're /actually/ represented. For instance, a concrete syntax tree may preserve information such as comment positions or even the precise location of syntactic tokens; this effectively allows something like a source file formatter to be implemented.

* syntax

The following section details the syntax of the different constructs in =lily=. I would describe =lily='s syntax to be quirky, chaotic, and elegant. I've chosen to omit popular lowercase identifiers such as =data=, =newtype=, =class=, =instance=, =where=, etc. as to achieve brevity through "carefully"-placed symbols.

** module header

The module header takes the following form:

#+begin_src haskell
module Main
#+end_src

** data types

The syntax for user-defined data types is similar to that of GADT syntax in Haskell and other FPLs. However, =lily= does not support the notion of GADTs themselves considering their difficulty to implement. In turn, this makes it so that syntactic checks are run to ensure that the "final" type in the chain of arrows =(->)= is the type itself.

#+begin_src haskell
List : Type -> Type
List a ?
  Nil : List a
  Cons : a -> List a -> List a
#+end_src

Furthermore, determining whether a data type is a =newtype= involves some syntactic analysis as well. Specifically, any data type that has a single constructor which in turn has a single argument is treated as a =newtype=. An underscore =_= can be used as shorthand if the constructor has the same name as the type.

#+begin_src haskell
Identity : Type -> Type
Identity a ?
  _ : a -> Identity a
#+end_src

Closed type families use a familiar GADT-like syntax, but they're disambiguated from data types through the use of =!= instead of =:= as a sentinel. Since the name of the type family is repeated in its "instances", an underscore can also be used as shorthand syntax.

#+begin_src haskell
Equal : Type -> Type -> Boolean
Equal a b ?
  Equal ! a -> a -> True
  _     ! a -> b -> False
#+end_src

This syntax is also used to define type synonyms. Much like =newtype=, the disambiguation happens through static analysis. A type family is a type synonym that has a single instance which in turn only has non-repeating variable binders. Moreover, =_= can be used as a shorthand much like in normal type families.

#+begin_src haskell
Matrix : Type -> Type
Matrix a ?
  _ ! a -> Array (Array a)
#+end_src

** type classes, instances

In =lily= the simplest practical type class can be defined using the following GADT-like form. Instead of an uppercase name however, methods start with a valid lowercase identifier.

#+begin_src haskell
Eq : Type -> Constraint
Eq a ?
  equal : a -> a -> Boolean
#+end_src

In the event that superclasses are needed to be declared, such is the case for =Ord=, the =>= sentinel is used.

#+begin_src haskell
Ord : Type -> Constraint
Ord a > Eq a ?
  compare : a -> a -> Ordering
#+end_src

For type classes with multiple type parameters, a minimal form of functional dependencies is provided. More specifically, the set-like syntax at the end of the =>= chain determines which type variables are enough to determine an instance for a particular type class.

#+begin_src haskell
MoandState : Type -> (Type -> Type) -> Constraint
MonadState s m > Monad m > { m } ?
  state : forall a. (s -> (Tuple a s)) -> m a
#+end_src

Instance declarations for type classes are required to have names, like the following form:

#+begin_src haskell
eqInt : Instance
eqInt < Eq Int ?
  equal : Int -> Int -> Boolean
  equal = ...

ordInt : Instance
ordInt < Ord Int ?
  compare : Int -> Int -> Ordering
  compare = ...
#+end_src

Moreover, additional constraints can be inserted using the =<= sentinel:

#+begin_src haskell
eqArray : Instance (Eq _)
eqArray < Eq (Array a) < Eq a ?
  equal : Array a -> Array a -> Boolean
  equal = ...
#+end_src

Since multiple type class parameters often bring about overlapping instances, =lily= also provides syntax for defining instance chains.

#+begin_src haskell
F : Type -> Type -> Constraint
F a b ?
  f : a -> b -> String

fDefault : Chain
fDefault ?
  fInt : Instance
  fInt < F Int a ?
    f = ...

  fDouble : Instance
  fDouble < F a Double ?
    f = ...
#+end_src
